// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/apis/retro/v1alpha1/board/board.proto

package board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardClient is the client API for Board service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardClient interface {
	CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error)
	GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error)
	ListBoards(ctx context.Context, in *ListBoardRequest, opts ...grpc.CallOption) (*ListBoardResponse, error)
	UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*UpdateBoardResponse, error)
	DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error)
	GetBoardTasks(ctx context.Context, in *GetBoardTasksRequest, opts ...grpc.CallOption) (Board_GetBoardTasksClient, error)
}

type boardClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardClient(cc grpc.ClientConnInterface) BoardClient {
	return &boardClient{cc}
}

func (c *boardClient) CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*CreateBoardResponse, error) {
	out := new(CreateBoardResponse)
	err := c.cc.Invoke(ctx, "/retro.board.Board/createBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetBoard(ctx context.Context, in *GetBoardRequest, opts ...grpc.CallOption) (*GetBoardResponse, error) {
	out := new(GetBoardResponse)
	err := c.cc.Invoke(ctx, "/retro.board.Board/getBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ListBoards(ctx context.Context, in *ListBoardRequest, opts ...grpc.CallOption) (*ListBoardResponse, error) {
	out := new(ListBoardResponse)
	err := c.cc.Invoke(ctx, "/retro.board.Board/listBoards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*UpdateBoardResponse, error) {
	out := new(UpdateBoardResponse)
	err := c.cc.Invoke(ctx, "/retro.board.Board/updateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*DeleteBoardResponse, error) {
	out := new(DeleteBoardResponse)
	err := c.cc.Invoke(ctx, "/retro.board.Board/deleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetBoardTasks(ctx context.Context, in *GetBoardTasksRequest, opts ...grpc.CallOption) (Board_GetBoardTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Board_ServiceDesc.Streams[0], "/retro.board.Board/getBoardTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &boardGetBoardTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Board_GetBoardTasksClient interface {
	Recv() (*GetBoardTasksResponse, error)
	grpc.ClientStream
}

type boardGetBoardTasksClient struct {
	grpc.ClientStream
}

func (x *boardGetBoardTasksClient) Recv() (*GetBoardTasksResponse, error) {
	m := new(GetBoardTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BoardServer is the server API for Board service.
// All implementations should embed UnimplementedBoardServer
// for forward compatibility
type BoardServer interface {
	CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error)
	GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error)
	ListBoards(context.Context, *ListBoardRequest) (*ListBoardResponse, error)
	UpdateBoard(context.Context, *UpdateBoardRequest) (*UpdateBoardResponse, error)
	DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error)
	GetBoardTasks(*GetBoardTasksRequest, Board_GetBoardTasksServer) error
}

// UnimplementedBoardServer should be embedded to have forward compatible implementations.
type UnimplementedBoardServer struct {
}

func (UnimplementedBoardServer) CreateBoard(context.Context, *CreateBoardRequest) (*CreateBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardServer) GetBoard(context.Context, *GetBoardRequest) (*GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedBoardServer) ListBoards(context.Context, *ListBoardRequest) (*ListBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBoards not implemented")
}
func (UnimplementedBoardServer) UpdateBoard(context.Context, *UpdateBoardRequest) (*UpdateBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoard not implemented")
}
func (UnimplementedBoardServer) DeleteBoard(context.Context, *DeleteBoardRequest) (*DeleteBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServer) GetBoardTasks(*GetBoardTasksRequest, Board_GetBoardTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBoardTasks not implemented")
}

// UnsafeBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServer will
// result in compilation errors.
type UnsafeBoardServer interface {
	mustEmbedUnimplementedBoardServer()
}

func RegisterBoardServer(s grpc.ServiceRegistrar, srv BoardServer) {
	s.RegisterService(&Board_ServiceDesc, srv)
}

func _Board_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retro.board.Board/createBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateBoard(ctx, req.(*CreateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retro.board.Board/getBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetBoard(ctx, req.(*GetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ListBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ListBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retro.board.Board/listBoards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ListBoards(ctx, req.(*ListBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_UpdateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).UpdateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retro.board.Board/updateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).UpdateBoard(ctx, req.(*UpdateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retro.board.Board/deleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteBoard(ctx, req.(*DeleteBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetBoardTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBoardTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoardServer).GetBoardTasks(m, &boardGetBoardTasksServer{stream})
}

type Board_GetBoardTasksServer interface {
	Send(*GetBoardTasksResponse) error
	grpc.ServerStream
}

type boardGetBoardTasksServer struct {
	grpc.ServerStream
}

func (x *boardGetBoardTasksServer) Send(m *GetBoardTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Board_ServiceDesc is the grpc.ServiceDesc for Board service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Board_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "retro.board.Board",
	HandlerType: (*BoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createBoard",
			Handler:    _Board_CreateBoard_Handler,
		},
		{
			MethodName: "getBoard",
			Handler:    _Board_GetBoard_Handler,
		},
		{
			MethodName: "listBoards",
			Handler:    _Board_ListBoards_Handler,
		},
		{
			MethodName: "updateBoard",
			Handler:    _Board_UpdateBoard_Handler,
		},
		{
			MethodName: "deleteBoard",
			Handler:    _Board_DeleteBoard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getBoardTasks",
			Handler:       _Board_GetBoardTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apis/retro/v1alpha1/board/board.proto",
}
